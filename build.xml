<?xml version="1.0" encoding="UTF-8"?>
<project name="cpdetector" default="build">
	<description>
		A framework for configurable 
		and extendable encoding detection 
		of textual documents.
	</description>

<!-- General Properties -->
    
    <property name="project.name" value="cpdetector" />
	<property name="libdir" value="${basedir}/ext" />
	<property name="builddir" value="${basedir}/bin" />
	<property name="sourcedir" value="${basedir}/src" />
	<property name="project.version" value="1.01" />
	

<!-- General paths & filesets. -->	

    <path description="Directory paths of project" id="sourcedirs" >    
<!--		
		<pathelement location="util/collections"/>	
-->
    </path>
    
    <path description="Classpath of project" id="classpath">
    	<pathelement path="${builddir}"/>
    	<fileset refid="externalJars" />
    </path>
    

    <fileset description="Source files of project" dir="${sourcedir}" id="sourcefiles">	
		<include name="**/*.java"/> 
	</fileset>    
	
    <fileset description="Compiled classfiles of project" dir="${builddir}" id="classfiles">
		<include name="**/*.class"/>
	</fileset>    
    
    <!-- 
    These files will be shipped in the nseAnnealing package 
   	by extracting them to the project's basedir, befor the 
   	whole project is packed into a jar. 
   	See the rule integrateJars
   	-->
    <fileset dir="${libdir}" id="externalJars" description="External library jar files that will be shipped with this *.jar distribution.">
    	<include name="**/*.jar"/>
    </fileset>
    
    <!-- compile the java sources -->


    <target name="build" depends="integrate.jars"> 
	    <mkdir dir="${builddir}" />
    	<javac 
    		srcdir="${sourcedir}"  
    		fork="true"
    	  	debug="true" 
    	  	destdir="${builddir}"			
    	  >
    		<classpath refid="classpath"/>		
		</javac>
    </target>
    
    <target name="integrate.jars"> 
		<copy file="${basedir}/gpl.txt" toDir="${builddir}"/>
		<unjar dest="${builddir}">
			<fileset refid="externalJars"/>
		</unjar>
		<!-- remove potentially contained sourcefiles -->
		 <delete includeEmptyDirs="true">
    		<fileset dir="${builddir}">
    			<exclude name="**/*.class" />
    		</fileset>
  		</delete>
    </target>
        
    <!-- Create the jar file for command line parsing support -->
    <target name="makejar" depends="delete.classfiles,build">
    	<jar destfile="${project.name}_${project.version}.jar" basedir="${builddir}" manifest="manifest.mf" >
			<include name="**/*.class"/>
    	</jar>
    </target>
    
    <!-- Dependency only for ensuring validity -->
    <target name="makezipEclipseProject" depends="build">
    	<zip destfile="${project.name}_eclipse_project_${project.version}.zip" basedir="${basedir}/.." >
			<include name="${project.name}/**/*.java"/>
			<include name="${project.name}/**/*.txt"/>
			<include name="${project.name}/**/*.jar"/>
			<include name="${project.name}/.classpath"/>
			<include name="${project.name}/.project"/>
			<include name="${project.name}/**/*.xml"/>
			<include name="${project.name}/manifest.mf"/>
    		<include name="${project.name}/doc/${project.name}.css" />
			<exclude name="${project.name}/*.txt"/>
			<exclude name="${project.name}/*.jar"/>
			<exclude name="${project.name}/*.zip"/>
			<exclude name="${project.name}/test*/**"/>
			<exclude name="${project.name}/bin/**" />
			<exclude name="${project.name}/doc/**/*.html" />
    	</zip>
    </target>

    <target name="javadoc" >
    	<mkdir dir="${basedir}/doc" />
        <javadoc destdir="${basedir}/doc" access="public" use="false"
            notree="false" nonavbar="false" noindex="false" 
            splitindex="true" Author="true" version="true"
            nodeprecatedlist="false" nodeprecated="false"       
            doctitle="cpdetector API Documentation version ${project.version}"
            windowtitle="cpdetector, an extensible codepage-detection framework."
            Verbose="true"
        	stylesheetfile="${basedir}/doc/cpdetector.css"
        	charset="UTF-8" 
        	docencoding="UTF-8"
        	
       	>
       		<classpath refid="classpath"/>
       		<bottom><![CDATA[Copyleft &#x32A2; 2003-2004 MPL 1.1, <span title='Save the whales!'>All Rights Footloose.</span>]]></bottom>
        	<fileset refid="sourcefiles"/>
       		<link offline="false" href="http://java.sun.com/j2se/1.4.2/docs/api/" />
       		<link offline="false" href="http://logging.apache.org/log4j/docs/api/" packagelistLoc="http://logging.apache.org/log4j/docs/api/package-list" />
        	<link offline="false" href="http://www.antlr.org/javadoc/" packagelistLoc="http://www.antlr.org/javadoc/package-list" />
        </javadoc>
    </target>
	
    <target name="zip.javadoc" depends="javadoc" >
		<description>
			Zip the javadoc API documentation to a zip named after the property project.name.
		</description>
		<zip basedir="${basedir}/doc" destfile="${basedir}/doc/${project.name}doc_${project.version}.zip" includes="**/*.html,**/*.css,package-list" />
    </target>

	<!-- remove all classfiles (except antlr sources) and the jar file-->
    <target name="delete.classfiles">
    	<delete verbose="true" failonerror="false">
    		<fileset refid="classfiles"/>
    		<fileset dir="${basedir}">
    			<include name="${project.name}_${project.version}.jar"/>
    		</fileset>
    	</delete>
    </target>
    
    
    <target name="delete.doc">
    	<description>Delete the generated documentation.</description>
    	<delete includeEmptyDirs="true" verbose="true" >
    		<fileset dir="${basedir}">
    			<include name="doc/**/*"/>
    			<!-- Also delete the zip file with the doc! -->
    			<include name="${project.name}doc.zip" />
    		</fileset>
    	</delete>
    </target>
    
    <target name="delete.local" depends="delete.classfiles,delete.doc" > 
    	<description> 
    		Delete only the local generated files. This target is intended to 
    		be used before the project is checked in into the cmvc. 
    	</description>
    </target> 
    	
    <!-- 
    	Hard rebuild: scrubbing all classfiles and the generated *.java files of antlr before 
    	invoking compilation. 
    -->
    <target name="rebuild" depends="delete.classfiles,build" />

    
</project>